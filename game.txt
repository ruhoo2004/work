#include <iostream>
#include <memory>
#include "game.hpp"

// any new types should be defined here
enum TypeEnum: unsigned short
{
    PAPER = 1,
    SCISSOR = 2,
    ROCK = 3,
    BIGROCK = 4, // a new dummy type, similar to ROCK but greater than ROCK
    DUMMY = 5,  // a dummy type, but can not compare with other types
    INVALID = 6,
};

// add new types there and update related concrete classes for winning relationship
class Paper: public TypesImpl<PAPER>
{
public:
    std::string name() const override { return "paper"; }
    bool bigger(TypeEnum t) const override { return ROCK == t || BIGROCK == t; }
};

class Scissor: public TypesImpl<SCISSOR>
{
public:
    std::string name() const override { return "scissor"; }
    bool bigger(TypeEnum t) const override { return PAPER == t; }
};

class Rock: public TypesImpl<ROCK>
{
public:
    std::string name() const override { return "rock"; }
    bool bigger(TypeEnum t) const override { return SCISSOR == t; }
};

class BigRock: public TypesImpl<BIGROCK>
{
public:
    std::string name() const override { return "big rock"; }
    bool bigger(TypeEnum t) const override { return SCISSOR == t || ROCK == t; }
};

// all compare to this one will result UNKNOWN
class Dummy: public TypesImpl<DUMMY>
{
public:
    std::string name() const override { return "dummy"; }
};

// create Types based on user input
class TypeFactory
{
public:
    static std::shared_ptr<Types> create(int c) {
        if (c > 0 && c < INVALID)
        {
            TypeEnum id = static_cast<TypeEnum>(c);
            switch(id)
            {
                case PAPER: return std::make_shared<Paper>();
                case SCISSOR: return std::make_shared<Scissor>();
                case ROCK: return std::make_shared<Rock>();
                case BIGROCK: return std::make_shared<BigRock>();
                case DUMMY: return std::make_shared<Dummy>();
                case INVALID: break; // to avoid warning -Wswitch
            }
        }
        return std::shared_ptr<Types>();
    }
};

void play(const std::shared_ptr<Types>& player)
{
    // random computer play
    const auto& computer = TypeFactory::create(rand() % 3 + 1);
    std::cout << "you " << player->name() << " vs. computer " << computer->name();

    auto ret = player->compare(*computer);
    if (Types::TIE == ret)
        std::cout << ": tie\n";
    else if (Types::WIN == ret)
        std::cout << ": you win\n";
    else if (Types::LOSE == ret)
        std::cout << ": you lose\n";
    else
        std::cout << ": undefined compare\n";
}

int main()
{
    int c;
    do
    {
        std::cout << "Enter your choice: 1->paper, 2->scissor, 3->rock, 0->quit\n";
        std::cin >> c;
        if (c == 0)
        {
            std::cout << "quit\n";
            break;
        }
        else
        {
            auto player = TypeFactory::create(c);
            if (player)
                play(player);
            else
                std::cout << "invalid input\n";
        }
    } while (true);
}
